/*
##### C++正则表达式 

正则是一种规则，它用来匹配（进而捕获、替换）字符串。这种规则需要“模式”、“字符串”这两样东西，“模式”根据正则规则，来处理“字符串”。这种规则被许多语言支持，C++11以后才支持正则。

###### 具有特殊意义的元字符

\：\字符能够改变字符原本的含义

^：^字符指示字符串的头，且要求字符串以字符开头，不占位。\^表示一个真正的^符号。

$：$字符指示字符串的尾，且要求字符串以字符结尾，不占位。\$表示一个真正的$符号。

()：分组，大正则中包含小正则。可以改变默认的优先级。在模式中可以使用\1来表示第一组已然捕获到的东西。

//ydpatjj@163.com

\b：指示字符串的边界（头/尾/空格左/空格右），字符\b要求边界的左边是字符，\b字符要求边界的右边是字符。

.：表示一个除了\n以外的任意一个字符。\\.表示一个真正的.符号。

|：a|b  a或b之一

[abc]：abc之中的任意一个

\[^abc]:  abc之外的

\[a-z]:	任意小写字母

\[^a-z]:  除了小写字母之外的

\w：任意一个字母数字下划线，等价于[(0-9)(a-z)(A-Z)(_)]

\W：字母数字下划线之外的，等价于[]

\d:	任意一个数子

\D:	除了数字之外的

\s:	空白符（空格、制表符、换页符）

###### 量词元字符

*：字符*要求字符出现0到多次   {0,}

+：字符+要求字符出现1到多次     (\w)  {1,} 

?：字符?要求字符出现0次或1次    {0,1}

{n}：字符{n}要求字符出现n次

{n,}：字符{n,}要求字符出现n到多次  {0,}

{n,m}：字符{n,m}要求字符出现n到m次、

所以含有`\`的元字符，在C++定义时，都要写成`\\`

###### 校验数字的表达式

数字：^ [0 - 9] * $
n位的数字：^ \d{ n }$
至少n位的数字：^ \d{ n, }$
m - n位的数字： ^ \d{ m,n }$
零和非零开头的数字： ^ (0 | \[1 - 9][0 - 9] *)$
非零开头的最多带两位小数的数字： ^ (\[1 - 9][0 - 9] *) + (.[0 - 9]{ 1,2 }) ? $
带1 - 2位小数的正数或负数： ^ (\ - ) ? \d + (\.\d{ 1,2 }) ? $
正数、负数、和小数： ^ (\ - | \ + ) ? \d + (\.\d + ) ? $
有两位小数的正实数： ^ [0 - 9] + (.[0 - 9]{ 2 }) ? $
有1~3位小数的正实数： ^ [0 - 9] + (.[0 - 9]{ 1,3 }) ? $
非零的正整数： ^ [1 - 9]\d * $ 或 ^ (\[1 - 9][0 - 9] *) { 1, 3 }$ 或^ \ + ? \[1 - 9][0 - 9] * $
非零的负整数： ^ \ - \[1 - 9][]0 - 9"*$ 或 ^-[1-9]\d*$
非负整数： ^ \d + $ 或 ^ [1 - 9]\d * | 0$
非正整数： ^ -[1 - 9]\d * | 0$ 或 ^ ((-\d + ) | (0 + ))$
非负浮点数： ^ \d + (\.\d + ) ? $ 或 ^ [1 - 9]\d * \.\d * | 0\.\d * [1 - 9]\d * | 0 ? \.0 + | 0$
非正浮点数： ^ ((-\d + (\.\d + ) ? ) | (0 + (\.0 + ) ? ))$ 或 ^ (-([1 - 9]\d * \.\d * | 0\.\d * [1 - 9]\d*)) | 0 ? \.0 + | 0$
正浮点数： ^ [1 - 9]\d * \.\d * | 0\.\d * [1 - 9]\d * $ 或 ^ (([0 - 9] + \.[0 - 9] * \[1 - 9][0 - 9] *) | ([0 - 9] * \[1 - 9][0 - 9] * \.[0 - 9] + ) | ([0 - 9] * \[1 - 9][0 - 9] *))$
负浮点数： ^ -([1 - 9]\d * \.\d * | 0\.\d * [1 - 9]\d*)$ 或 ^ (-(([0 - 9] + \.[0 - 9] * \[1 - 9][0 - 9] *) | ([0 - 9] * \[1 - 9][0 - 9] * \.[0 - 9]) | ([0 - 9] * \[1 - 9][0 - 9] *)))$
浮点数： ^ (-? \d + )(\.\d + ) ? $ 或 ^ -? ([1 - 9]\d * \.\d * | 0\.\d * [1 - 9]\d * | 0 ? \.0 + | 0)$

###### 校验字符的表达式

汉字： ^ [\u4e00 - \u9fa5]{ 0, }$
英文和数字： ^ [A - Za - z0 - 9] + $ 或 ^ [A - Za - z0 - 9]{ 4,40 }$
长度为3 - 20的所有字符： ^ .{3, 20}$
由26个英文字母组成的字符串： ^ [A - Za - z] + $
由26个大写英文字母组成的字符串： ^ [A - Z] + $
由26个小写英文字母组成的字符串： ^ [a - z] + $
由数字和26个英文字母组成的字符串： ^ [A - Za - z0 - 9] + $
由数字、26个英文字母或者下划线组成的字符串： ^ \w + $ 或 ^ \w{ 3,20 }$
中文、英文、数字包括下划线： ^ [\u4E00 - \u9FA5A - Za - z0 - 9_] + $
中文、英文、数字但不包括下划线等符号： ^ [\u4E00 - \u9FA5A - Za - z0 - 9] + $ 或 ^ [\u4E00 - \u9FA5A - Za - z0 - 9]{ 2,20 }$
可以输入含有 ^ %&',;=?$\"等字符：\[^%&', ; = ? $\x22] + 12 禁止输入含有~的字符：\[^ ~\x22] +

###### 特殊需求表达式

Email地址： ^ \w + ([-+.]\w + ) * @\w + ([-.]\w + ) * \.\w + ([-.]\w + ) * $
域名：\[a - zA - Z0 - 9][-a - zA - Z0 - 9]{ 0,62 }(/ .\[a - zA - Z0 - 9][-a - zA - Z0 - 9]{ 0,62 }) + / . ?
InternetURL：[a - zA - z] + ://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$
手机号码： ^ (13[0 - 9] | 14[5 | 7] | 15[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9] | 18[0 | 1 | 2 | 3 | 5 | 6 | 7 | 8 | 9])\d{ 8 }$
电话号码(0511 - 4405222、021 - 87888822)：\d{ 3 } - \d{ 8 } | \d{ 4 } - \d{ 7 }
身份证号(15位、18位数字)： ^ \d{ 15 } | \d{ 18 }$
短身份证号码(数字、字母x结尾)： ^ ([0 - 9]) { 7, 18 }(x | X) ? $ 或 ^ \d{ 8,18 } | [0 - 9x]{ 8,18 } | [0 - 9X]{ 8,18 } ? $
帐号：(字母开头，允许5 - 16字节，允许字母数字下划线)： ^ \[a - zA - Z][a - zA - Z0 - 9_]{ 4,15 }$
密码:(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)： ^ [a - zA - Z]\w{ 5,17 }$
强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8 - 10之间)：* ^ (? = .*\d)(? = .*[a - z])(? = .*[A - Z]).{8, 10}$
日期格式： ^ \d{ 4 } - \d{ 1,2 } - \d{ 1,2 }
一年的12个月(01～09和1～12)： ^ (0 ? [1 - 9] | 1[0 - 2])$
一个月的31天(01～09和1～31)： ^ ((0 ? [1 - 9]) | ((1 | 2)[0 - 9]) | 30 | 31)$
xml文件： ^ ([a - zA - Z] + -? ) + [a - zA - Z0 - 9] + \\.\[x | X]\[m | M][l | L]$
中文字符的正则表达式：[\u4e00 - \u9fa5]
双字节字符：\[^ \x00 - \xff](包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
空白行的正则表达式：\n\s * \r(可以用来删除空白行)
HTML标记的正则表达式：<(\S* ? )[^ > ] *>.* ? < / \1> | <.* ? / > (复杂的嵌套标记依旧无能为力)
首尾空白字符的正则表达式： ^ \s * | \s * $或(^ \s*) | (\s * $) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等))
腾讯QQ号：\[1 - 9][0 - 9]{ 4, } (腾讯QQ号从10000开始)
中国邮政编码：[1 - 9]\d{ 5 }(? !\d) (中国邮政编码为6位数字)
IP地址：\d + \.\d + \.\d + \.\d + (提取IP地址时有用)
IP地址：((? : (? : 25[0 - 5] | 2[0 - 4]\\d | [01] ? \\d ? \\d)\\.) { 3 }(? : 25[0 - 5] | 2[0 - 4]\\d | [01] ? \\d ? \\d))
*/